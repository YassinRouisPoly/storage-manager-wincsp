// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StorageManager.Data;

#nullable disable

namespace StorageManager.Data.Migrations
{
    [DbContext(typeof(SMContext))]
    partial class SMContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("StorageManager.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("StorageManager.Data.Entities.ProductReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StorageManager.Data.Entities.ProductTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("LinkedBoxId")
                        .HasColumnType("int");

                    b.Property<int>("LinkedProductRefenceId")
                        .HasColumnType("int");

                    b.Property<int>("LinkedProductReferenceId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LinkedBoxId");

                    b.HasIndex("LinkedProductReferenceId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("StorageManager.Data.Entities.StorageArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("FilterCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FilterCategoryId");

                    b.ToTable("StorageAreas");
                });

            modelBuilder.Entity("StorageManager.Data.Entities.StorageBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("FilterCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFull")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("FilterCategoryId");

                    b.ToTable("StorageBoxes");
                });

            modelBuilder.Entity("StorageManager.Data.Entities.StoredProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoxId")
                        .HasColumnType("int");

                    b.Property<int>("ProductReferenceId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoxId");

                    b.HasIndex("ProductReferenceId");

                    b.ToTable("StoredProducts");
                });

            modelBuilder.Entity("StorageManager.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StorageManager.Data.Entities.ProductReference", b =>
                {
                    b.HasOne("StorageManager.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("StorageManager.Data.Entities.ProductTransfer", b =>
                {
                    b.HasOne("StorageManager.Data.Entities.StorageBox", "LinkedBox")
                        .WithMany()
                        .HasForeignKey("LinkedBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StorageManager.Data.Entities.ProductReference", "LinkedProductReference")
                        .WithMany()
                        .HasForeignKey("LinkedProductReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedBox");

                    b.Navigation("LinkedProductReference");
                });

            modelBuilder.Entity("StorageManager.Data.Entities.StorageArea", b =>
                {
                    b.HasOne("StorageManager.Data.Entities.Category", "FilterCategory")
                        .WithMany()
                        .HasForeignKey("FilterCategoryId");

                    b.Navigation("FilterCategory");
                });

            modelBuilder.Entity("StorageManager.Data.Entities.StorageBox", b =>
                {
                    b.HasOne("StorageManager.Data.Entities.StorageArea", "Area")
                        .WithMany("Boxes")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StorageManager.Data.Entities.Category", "FilterCategory")
                        .WithMany()
                        .HasForeignKey("FilterCategoryId");

                    b.Navigation("Area");

                    b.Navigation("FilterCategory");
                });

            modelBuilder.Entity("StorageManager.Data.Entities.StoredProduct", b =>
                {
                    b.HasOne("StorageManager.Data.Entities.StorageBox", "Box")
                        .WithMany("Products")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StorageManager.Data.Entities.ProductReference", "ProductReference")
                        .WithMany("StoredProducts")
                        .HasForeignKey("ProductReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Box");

                    b.Navigation("ProductReference");
                });

            modelBuilder.Entity("StorageManager.Data.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("StorageManager.Data.Entities.ProductReference", b =>
                {
                    b.Navigation("StoredProducts");
                });

            modelBuilder.Entity("StorageManager.Data.Entities.StorageArea", b =>
                {
                    b.Navigation("Boxes");
                });

            modelBuilder.Entity("StorageManager.Data.Entities.StorageBox", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
